<?php
/**
 * AbstractMapper class is a base class for all mapper lasses.
 * It contains the basic functionality and also DBMS pointer.
 *
 * @author Levon Naghashyan <levon@naghashyan.com>
 * @site https://naghashyan.com
 * @package ngs.framework.dal.mappers
 * @version 4.0.0
 * @year 2009-2020
 *
 * This file is part of the NGS package.
 *
 * @copyright Naghashyan Solutions LLC
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 */

namespace ngs\dal\mappers {

  use ngs\dal\dto\AbstractDto;
  use ngs\exceptions\DebugException;

  abstract class AbstractMapper {

    /**
     * The child class must implemet this method to return table name.
     *
     * @return
     */
    abstract public function getTableName(): string;

    /**
     * The child class must implement this method to return primary key field name.
     *
     * @return
     */
    abstract public function getPKFieldName(): string;

    /**
     * The child class must implement this method
     * to return an instance of corresponding DTO class.
     *
     * @return AbstractDto
     */
    abstract public function createDto(): AbstractDto;


    /**
     * @param array $mapArray
     * @param string $itemName
     * @param string $prefix
     * @return mixed|null
     */
    protected function getCorrespondingFunctionName(array $mapArray, string $itemName, string $prefix = 'set') {
      // Get keys.
      $mapKeys = array_keys($mapArray);
      // Read map items and create correseponding functions.
      foreach ($mapKeys as $itemnameFromMap){
        if ($itemnameFromMap === $itemName){
          // Get value for this item.
          $valueOfMap = $mapArray[$itemnameFromMap];
          // Make first letter uppercase, and add "set".
          return $prefix . ucfirst($valueOfMap);
        }
      }
      return null;
    }

    public function getFieldValue($dto, $fieldName) {
      $func = $this->getCorrespondingFunctionName($dto->getMapArray(), $fieldName, "get");
      return $dto->$func();
    }

    /**
     * create dtos array from mysql fethed reuslt array
     *
     * @param array $results
     * @return AbstractDto[]|null
     */
    protected function createDtoFromResultArray(array $results): ?array {
      $resultArr = [];
      foreach ($results as $result){
        $dto = $this->createDto();
        $dto->fillDtoFromArray($result);
        $resultArr[] = $dto;
      }
      return $resultArr;
    }

    /**
     * encode dto to json
     *
     * @param object $dto
     *
     * @return false|string
     */
    public function dtoToJson($dto) {
      return json_encode($this->dtoToArray($dto), JSON_THROW_ON_ERROR, 512);
    }

    /**
     * encode dto to array
     *
     * @param object $dto
     *
     * @return json object
     */
    public function dtoToArray($dto) {
      $dto_fields = array_values($dto->getMapArray());
      $db_fields = array_keys($dto->getMapArray());

      for ($i = 0; $i < count($dto_fields); $i++){
        $functionName = "get" . ucfirst($dto_fields[$i]);
        $val = $dto->$functionName();
        if ($val != null){
          if (NGS()->isJson($val)){
            $params[$db_fields[$i]] = json_decode($val, true);
            continue;
          }
          $params[$db_fields[$i]] = $val;
        }
      }
      return ($params);
    }

    /**
     * encode dto to array
     *
     * @param object $dto
     *
     * @return json object
     */
    public function jsonToDto($json, $dto = null) {
      if ($dto == null){
        $dto = $this->createDto();
      }
      $db_fields = $dto->getMapArray();
      foreach ($json as $key => $value){
        if (isset($db_fields[$key])){
          $functionName = "set" . ucfirst($db_fields[$key]);
          $dto->$functionName($value);
        }
      }
      return $dto;
    }

    /**
     * Inserts dto into table.
     *
     * @param AbstractDto $dto
     * @return autogenerated id or -1 if something goes wrong
     */
    public abstract function insertDto(AbstractDto $dto);

    /**
     * Updates table fields by primary key.
     * DTO must contain primary key value.
     *
     * @param AbstractDto $dto
     * @return affected rows count or -1 if something goes wrong
     */
    public abstract function updateByPK(AbstractDto $dto);

    /**
     * Selects from table by primary key and returns corresponding DTO
     *
     * @param mixed $id
     * @return
     */
    public abstract function selectByPK($id);

    /**
     * Deletes the row by primary key
     *
     * @param mixed $id - the unique identifier of table
     * @return affacted rows count or -1 if something goes wrong
     */
    public abstract function deleteByPK($id);

  }

}