<?php
/**
 * AbstractMapper class is a base class for all mapper lasses.
 * It contains the basic functionality and also DBMS pointer.
 *
 * @author Levon Naghashyan <levon@naghashyan.com>
 * @site http://naghashyan.com
 * @package framework.dal.mappers
 * @version 2.0.0
 * @year 2014
 * @copyright Naghashyan Solutions LLC
 */
namespace ngs\framework\dal\mappers {

	abstract class AbstractSolrMapper extends AbstractMapper {

		public $dbms;

		/**
		 * Initializes DBMS pointer.
		 */
		function __construct() {
			$this->dbms = \ngs\framework\dal\connectors\SolrDBMS::getInstance(NGS()->getConfig()->DB_SOLR_host, $this->getTableName(), NGS()->getConfig()->DB_SOLR_user, NGS()->getConfig()->DB_SOLR_pass);
		}

		/**
		 * Inserts dto into table.
		 *
		 * @param object $dto
		 * @param object $esc [optional] - shows if the textual values must be escaped before setting to DB
		 * @return autogenerated id or -1 if something goes wrong
		 */
		public function insertDto($dto) {
			//validating input params
			if ($dto == null) {
				throw new Exception("The input param can not be NULL.");
			}
			return $this->insertDtos(array($dto));
		}

		/**
		 * Inserts dtos into table.
		 *
		 * @param object $dto
		 * @param object $esc [optional] - shows if the textual values must be escaped before setting to DB
		 * @return autogenerated id or -1 if something goes wrong
		 */
		public function insertDtos($dtos) {
			//validating input params
			if ($dtos == null) {
				throw new Exception("The input param can not be NULL.");
			}
			$params = array("add" => array());
			foreach ($dtos as $key => $value) {
				//$value->setAddedDate(gmdate('Y-m-d\TH:i:s\Z', strtotime($value->getAddedDate())));
				$params["add"][$key] = $this->dtoToArray($value);
				break;
			}
			$response = $this->dbms->jsonQuery("update/json", json_encode($params));
			if (isset($response->responseHeader) && isset($response->responseHeader->status) && $response->responseHeader->status == 0) {
				return true;
			}
			return false;
		}

		/**
		 * Updates table fields by primary key.
		 * DTO must contain primary key value.
		 *
		 * @param int $id
		 * @return affected rows count or -1 if something goes wrong
		 */
		public function updateByPK($id) {
			$params = array();
			$params["command"] = "full-import";
			$params["clean"] = false;
			$params["commit"] = true;
			$params["itemId"] = $id;
			$response = $this->dbms->query("dataupdate", $params);
			var_dump($response);
			exit ;
		}

		/**
		 * Selects from table by primary key and returns corresponding DTO
		 *
		 * @param object $id
		 * @return
		 */
		public function selectByPK($id) {

		}

		/**
		 * Deletes the row by primary key
		 *
		 * @param int $id - the unique identifier of table
		 * @return affacted rows count or -1 if something goes wrong
		 */
		public function deleteByPK($id) {
			if (is_numeric($id)) {
				return $this->deleteByPKeys(array($id));
			}
			return null;
		}

		/**
		 * Deletes the row by primary keys
		 *
		 * @param array $id - the unique identifier of table
		 * @return affacted rows count or -1 if something goes wrong
		 */
		public function deleteByPKeys($ids) {
			$params = array("delete" => array());
			foreach ($ids as $key => $value) {
				$params["delete"][$key]["id"] = $value;
			}
			$response = $this->dbms->jsonQuery("update/json", json_encode($params));
			if (isset($response->responseHeader) && isset($response->responseHeader->status) && $response->responseHeader->status == 0) {
				return true;
			}
			return false;
		}

		/**
		 * Executes the query and returns an array of corresponding DTOs
		 *
		 * @param array $params
		 * @return
		 */
		public function fetchRows($params = array()) {
			$response = $this->dbms->query("select", $params);
			var_dump($response);exit;
			$resultArr = array('count' => $response->numFound);
			foreach ((array)$response->docs as $key => $value) {
				$resultArr["dtos"][] = $this->jsonToDto($value);
			}
			return $resultArr;
		}

		/**
		 * Executes the query and returns an row field of corresponding DTOs
		 * if $row isn't false return first elem
		 *
		 * @param array $params
		 * @return
		 */
		public function fetchRow($params = array()) {
			$result = $this->fetchRows($params);
			if (isset($result["dtos"]) && is_array($result["dtos"]) && count($result["dtos"]) > 0) {
				return $result["dtos"][0];
			}
			return false;
		}

	}

}
?>