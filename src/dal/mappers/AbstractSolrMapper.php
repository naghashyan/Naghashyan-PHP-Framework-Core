<?php
/**
 * AbstractMapper class is a base class for all mapper lasses.
 * It contains the basic functionality and also DBMS pointer.
 *
 * @author Levon Naghashyan <levon@naghashyan.com>
 * @site http://naghashyan.com
 * @package framework.dal.mappers
 * @version 3.6.0
 * @year 2014
 * @copyright Naghashyan Solutions LLC
 */
namespace ngs\dal\mappers {


  use ngs\dal\connectors\SolrDBMS;
  use ngs\exceptions\DebugException;

  abstract class AbstractSolrMapper extends AbstractMapper {

    public $dbms;

    /**
     * Initializes DBMS pointer.
     */
    function __construct() {
      $host = NGS()->getConfig()->DB->solr->host;
      $user = NGS()->getConfig()->DB->solr->port;
      $path = NGS()->getConfig()->DB->solr->path;
      $this->dbms = new SolrDBMS($host, $user, $path, $this->getTableName());
    }


    protected function getSelectQuery() {
      return $this->dbms->createSelect();
    }

    protected function getUpdateQuery() {
      return $this->dbms->createUpdate();
    }

    /**
     * Inserts dto into table.
     *
     * @param object $dto
     * @param object $esc [optional] - shows if the textual values must be escaped before setting to DB
     * @return boolean
     */
    public function insertDto($dto) {
      //validating input params
      if ($dto == null){
        throw new DebugException("The input param can not be NULL.");
      }

      $dto_fields = array_values($dto->getMapArray());
      $db_fields = array_keys($dto->getMapArray());

      $query = $this->getUpdateQuery();
      $doc = new \Solarium\QueryType\Update\Query\Document\Document;
      //$doc= $query->createDocument();

      for ($i = 0; $i < count($dto_fields); $i++){
        if ($dto_fields[$i] == $this->getPKFieldName()){
          continue;
        }
        $functionName = "get" . ucfirst($dto_fields[$i]);
        $val = $dto->$functionName();
        if (isset($val)){
          $doc->setField($db_fields[$i], $val);

        }
      }
      //add document and commit
      $query->addDocument($doc)->addCommit();

      // this executes the query and returns the result
      $result = $this->dbms->update($query);
      if ($result->getStatus() === 0){
        return true;
      }
      return false;
    }

    /**
     * Inserts dtos into table.
     *
     * @param object $dto
     * @param object $esc [optional] - shows if the textual values must be escaped before setting to DB
     * @return autogenerated id or -1 if something goes wrong
     */
    public function insertDtos($dtos) {
      //validating input params
      if ($dtos == null){
        throw new DebugException("The input param can not be NULL.");
      }
      $params = array("add" => array());
      foreach ($dtos as $key => $value){
        //$value->setAddedDate(gmdate('Y-m-d\TH:i:s\Z', strtotime($value->getAddedDate())));
        $params["add"][$key] = $this->dtoToArray($value);
        break;
      }
      $response = $this->dbms->jsonQuery("update/json", json_encode($params));
      if (isset($response->responseHeader) && isset($response->responseHeader->status) && $response->responseHeader->status == 0){
        return true;
      }
      return false;
    }

    /**
     * Updates table fields by primary key.
     * DTO must contain primary key value.
     *
     * @param int $id
     * @return boolean
     */
    public function updateByPK($dto) {

      //validating input params
      if ($dto == null){
        throw new DebugException("The input param can not be NULL.");
      }
      $getPKFunc = $this->getCorrespondingFunctionName($dto->getMapArray(), $this->getPKFieldName(), "get");
      $pk = $dto->$getPKFunc();
      if (!isset($pk)){
        throw new DebugException("The primary key is not set.");
      }

      $dto_fields = array_values($dto->getMapArray());
      $db_fields = array_keys($dto->getMapArray());

      $query = $this->getUpdateQuery();
      $doc = new \Solarium\QueryType\Update\Query\Document\Document;
      //$doc= $query->createDocument();

      for ($i = 0; $i < count($dto_fields); $i++){
        if ($dto_fields[$i] == $this->getPKFieldName()){
          continue;
        }
        $functionName = "get" . ucfirst($dto_fields[$i]);
        $val = $dto->$functionName();
        if (isset($val)){
          $doc->setFieldModifier($db_fields[$i], 'set');
          $doc->setField($db_fields[$i], $val);

        }
      }
      $doc->setKey($this->getPKFieldName(), $pk);

      //add document and commit
      $query->addDocument($doc)->addCommit();

      // this executes the query and returns the result
      $result = $this->dbms->update($query);
      if ($result->getStatus() === 0){
        return true;
      }
      return false;
    }

    /**
     * Selects from table by primary key and returns corresponding DTO
     *
     * @param object $id
     * @return
     */
    public function selectByPK($id) {

    }

    /**
     * Deletes the row by primary key
     *
     * @param int $id - the unique identifier of table
     * @return affacted rows count or -1 if something goes wrong
     */
    public function deleteByPK($id) {
      if (is_numeric($id)){
        return $this->deleteByPKeys(array($id));
      }
      return null;
    }

    /**
     * Deletes the row by primary keys
     *
     * @param array $id - the unique identifier of table
     * @return affacted rows count or -1 if something goes wrong
     */
    public function deleteByPKeys($ids) {
      $params = array("delete" => array());
      foreach ($ids as $key => $value){
        $params["delete"][$key]["id"] = $value;
      }
      $response = $this->dbms->jsonQuery("update/json", json_encode($params));
      if (isset($response->responseHeader) && isset($response->responseHeader->status) && $response->responseHeader->status == 0){
        return true;
      }
      return false;
    }

    /**
     * Executes the query and returns an array of corresponding DTOs
     *
     * @param array $params
     * @return
     */
    public function fetchRows($query) {
      $response = $this->dbms->select($query);
      $resultArr = $this->createDtoFromResultArray($response);
      return ["count" => $response->count(), "dtos" => $resultArr];
    }

    /**
     * create dtos array from mysql fethed reuslt array
     *
     * @param array $results
     * @return array array
     */
    protected function createDtoFromResultArray($results) {
      $resultArr = array();
      foreach ($results as $result){
        $tmpArr = [];
        foreach ($result as $key => $value){
          $tmpArr[$key] = $value;
        }
        $dto = $this->createDto();
        $this->initializeDto($dto, $tmpArr);
        $resultArr[] = $dto;
      }
      return $resultArr;
    }

  }

}